import pygame
import sys
import random

# Inicjalizacja
pygame.init()
SZEROKOSC, WYSOKOSC = 600, 400
OKNO = pygame.display.set_mode((SZEROKOSC, WYSOKOSC))
pygame.display.set_caption("Ping Pong")

# Kolory
BIALY = (255, 255, 255)
ZIELONY = (0, 255, 0)
CZERWONY = (255, 0, 0)
CZARNY = (0, 0, 0)

# Parametry
SZEROKOSC_PALETKI, WYSOKOSC_PALETKI = 100, 10
PROMIEN_PILKI = 10
przyspieszenie_pilki = [0.2, 0.3, 0.1, 0.6, 0.44]
predkosc_ai = 5
czcionka = pygame.font.SysFont(None, 36)
zegar = pygame.time.Clock()

def zresetuj_gre():
    """Funkcja resetująca grę na pozycje początkowe"""
    global gracz, ai, pilka, predkosc_pilki
    gracz = pygame.Rect(SZEROKOSC // 2 - SZEROKOSC_PALETKI // 2, WYSOKOSC - 30, SZEROKOSC_PALETKI, WYSOKOSC_PALETKI)
    ai = pygame.Rect(SZEROKOSC // 2 - SZEROKOSC_PALETKI // 2, 40, SZEROKOSC_PALETKI, WYSOKOSC_PALETKI)
    pilka = pygame.Rect(SZEROKOSC // 2, WYSOKOSC // 2, PROMIEN_PILKI, PROMIEN_PILKI)
    
    predkosc_pilki = [random.choice([-2, 2]), random.choice([-2, 2])]

def rysuj_obiekty(czas_gry = 0):
    """Funkcja stylizuje okno gry, pokazuje aktulany czas gry"""
    OKNO.fill(CZARNY)
    pygame.draw.rect(OKNO, ZIELONY, gracz)
    pygame.draw.rect(OKNO, CZERWONY, ai)
    pygame.draw.ellipse(OKNO, BIALY, pilka)

    # Czas gry
    tekst_czas_gry = czcionka.render(f'Czas: {czas_gry // 1000}s', True, BIALY)
    OKNO.blit(tekst_czas_gry, (SZEROKOSC // 2 - 50, 10))

    pygame.display.flip()

def pokaz_koniec_gry(tekst, czas, kolor):
    "Funkcja pokazuje napisy końcowe, czas gry"
    OKNO.fill(CZARNY)
    tekst1 = czcionka.render("KONIEC GRY", True, CZERWONY)
    tekst2 = czcionka.render("Naciśnij R, aby zrestartować", True, BIALY)
    tekst3 = czcionka.render(tekst, True, kolor)
    tekst4 = czcionka.render(f'Czas gry wynosi: {czas / 1000}s', True, BIALY)
    OKNO.blit(tekst4, (SZEROKOSC // 2 - 120, WYSOKOSC // 2 - 30))
    OKNO.blit(tekst2, (SZEROKOSC // 2 - 150, WYSOKOSC // 2 + 10))
    OKNO.blit(tekst1, (SZEROKOSC // 2 - 70, WYSOKOSC // 2 - 110))
    OKNO.blit(tekst3, (SZEROKOSC // 2 - 60, WYSOKOSC // 2 - 70))
    pygame.display.flip()

def main():
    "Główna funkcja zajmująca się przebiegiem gry"
    zresetuj_gre()
    dziala = True
    koniec = False

    start_czas = pygame.time.get_ticks()

    while dziala:
        zegar.tick(60)

        czas_gry = pygame.time.get_ticks() - start_czas
        for zdarzenie in pygame.event.get():
            if zdarzenie.type == pygame.QUIT:
                dziala = False

        klawisze = pygame.key.get_pressed()

        if koniec:
            if klawisze[pygame.K_r]:
                zresetuj_gre()
                start_czas = pygame.time.get_ticks()
                koniec = False
            continue

        # Ruch gracza (zwiększona szybkość)
        if klawisze[pygame.K_a]:
            gracz.x -= 8
        if klawisze[pygame.K_d]:
            gracz.x += 8
        gracz.x = max(0, min(SZEROKOSC - SZEROKOSC_PALETKI, gracz.x))

        # Ruch AI
        if ai.centerx < pilka.centerx:
            ai.x += predkosc_ai
        elif ai.centerx > pilka.centerx:
            ai.x -= predkosc_ai
        ai.x = max(0, min(SZEROKOSC - SZEROKOSC_PALETKI, ai.x))

        # Ruch piłki
        pilka.x += int(predkosc_pilki[0])
        pilka.y += int(predkosc_pilki[1])

        # Odbicia od ścian
        if pilka.left <= 0 or pilka.right >= SZEROKOSC:
            predkosc_pilki[0] *= -1

        # Odbicia od paletek i przyspieszenie
        if pilka.colliderect(gracz) and predkosc_pilki[1] > 0:
            predkosc_pilki[1] *= -1
            predkosc_pilki[0] *= 1 + random.choice(przyspieszenie_pilki)
            predkosc_pilki[1] *= 1 + random.choice(przyspieszenie_pilki)

        if pilka.colliderect(ai) and predkosc_pilki[1] < 0:
            predkosc_pilki[1] *= -1
            predkosc_pilki[0] *= 1 + random.choice(przyspieszenie_pilki)
            predkosc_pilki[1] *= 1 + random.choice(przyspieszenie_pilki)

        # Koniec gry
        if pilka.top > WYSOKOSC or pilka.bottom < 0:
            if pilka.top > WYSOKOSC:
                pokaz_koniec_gry('Przegrana!', czas_gry, CZERWONY)
            else:
                pokaz_koniec_gry('Wygrana!', czas_gry,  ZIELONY)
            koniec = True
            continue

        rysuj_obiekty(czas_gry)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()






# TODO
# Ruch paletki na dole
# Jak rysowane są obiekty (funkcja rysuj_obiekty())
# Ogólne omówienie pygame
# Pokazać kod
